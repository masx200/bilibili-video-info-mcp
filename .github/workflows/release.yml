name: Auto Create Release and Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: "New version number (e.g.: 0.1.2)"
        required: true
      prerelease:
        description: "Is prerelease version"
        type: boolean
        default: false

jobs:
  update-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整历史以便生成完整的commit log
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Git User
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update Version Number
        run: |
          # 使用sed更新pyproject.toml中的版本号
          sed -i "s/version = \"[0-9]*\.[0-9]*\.[0-9]*\"/version = \"${{ github.event.inputs.version }}\"/g" pyproject.toml
          echo "Version updated to ${{ github.event.inputs.version }}"

      - name: Commit Version Update
        run: |
          git add pyproject.toml
          git commit -m "Bump version to ${{ github.event.inputs.version }}"

      - name: Collect Commit Messages
        id: get_commits
        run: |
          # 获取最新的tag
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          # 如果没有找到tag，则收集所有的commit，排除merge提交
          if [ -z "$latest_tag" ]; then
            echo "No previous tag found, collecting all commits (excluding merges)"
            changelog=$(git log --pretty=format:"* %s (%h)" --reverse --no-merges)
          else
            echo "Found latest tag: $latest_tag, collecting commits since then (excluding merges)"
            changelog=$(git log ${latest_tag}..HEAD --pretty=format:"* %s (%h)" --reverse --no-merges)
          fi

          # 保存changelog到文件
          echo "$changelog" > changelog.md

          # 使用环境文件语法设置输出变量
          echo "changelog<<EOL" >> "$GITHUB_OUTPUT"
          echo "$changelog" >> "$GITHUB_OUTPUT"
          echo "EOL" >> "$GITHUB_OUTPUT"

      - name: Create Tag
        run: |
          git tag v${{ github.event.inputs.version }}

      - name: Push Changes and Tag
        run: |
          git push origin main
          git push origin v${{ github.event.inputs.version }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: ${{ github.event.inputs.version }}
          body_path: changelog.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}

    outputs:
      changelog: ${{ steps.get_commits.outputs.changelog }}

  deploy-to-pypi:
    needs: update-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: v${{ github.event.inputs.version }} # 使用新创建的tag

      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build Package
        run: python -m build

      - name: Publish Package to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*
